# PostgreSQL Connection Properties
spring.datasource.url=jdbc:postgresql://db:5432/testdb
spring.datasource.username=postgres
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# MongoDB Connection Properties
spring.data.mongodb.host=mongodb
spring.data.mongodb.port=27017
spring.data.mongodb.database=userdb
spring.data.mongodb.username=mongoadmin
spring.data.mongodb.password=mongopassword
spring.data.mongodb.authentication-database=admin

#for db2 access IBM DB2 Connection Properties
# spring.datasource.url=jdbc:db2://db2:50000/testdb
# spring.datasource.username=db2inst1
# spring.datasource.password=password
# spring.datasource.driver-class-name=com.ibm.db2.jcc.DB2Driver
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.DB2Dialect

# JPA Properties
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true


# Thymeleaf Properties
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false

# Spring Batch Properties
spring.batch.job.enabled=false
spring.batch.jdbc.initialize-schema=embedded
spring.jpa.defer-datasource-initialization=true

# File Upload Properties
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Swagger UI Properties
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha

# for db2 access
# DB2 Connection Properties
# spring.datasource.url=jdbc:db2://db:50000/testdb
# spring.datasource.username=db2inst1
# spring.datasource.password=password
# spring.datasource.driver-class-name=com.ibm.db2.jcc.DB2Driver

# # JPA Properties
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.DB2Dialect

# Note that DB2 has some limitations with column names and table names, so you might need to adjust your entity annotations:

# @Table(name = "USERS")
# public class User {
#     // ...
# }

# Copy
# java
# For ARM64 architecture (like M1/M2 Macs), you might face compatibility issues with DB2. In that case, you might need to use a different approach or stick with PostgreSQL.

# To query DB2 from the terminal:

# docker exec -it java-devcontainer-db-1 bash
# export PATH=$PATH:/database/config/db2inst1/sqllib/bin/
# export DB2INSTANCE=db2inst1
# db2 connect to testdb user db2inst1 using password
# db2 connect to testdb user db2inst1 using password
# db2 "SELECT * FROM USERS"


# sh-4.4# db2 connect to testdb user db2inst1 using password
# sh: db2: command not found
# sh-4.4# export PATH=$PATH:/opt/ibm/db2/V11.5/adm
# sh-4.4# db2 connect to testdb user db2inst1 using password
# sh: db2: command not found
# sh-4.4# export PATH=$PATH:/database/config/db2inst1/sqllib/bin/
# sh-4.4# db2 connect to testdb user db2inst1 using password
# SQL10007N Message "-1390" could not be retrieved.  Reason code: "3".
# sh-4.4# db2 connect to testdb user db2inst1 using password
# SQL10007N Message "-1390" could not be retrieved.  Reason code: "3".
# sh-4.4# echo $DB2INSTANCE

# sh-4.4# export DB2INSTANCE=db2inst1
# sh-4.4# db2 connect to testdb user db2inst1 using password